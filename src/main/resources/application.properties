spring.application.name=ai-architect-backend
app.image-storage-path=./media_files

# Database Connection - values will be supplied by Docker Compose environment variables
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:architect_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:architect_password}

# JPA/Hibernate Properties
# Automatically updates the database schema. Use "validate" in production.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Good for development to see the SQL queries being executed
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true # Formats the SQL logs to be more readable

# Google Cloud Vertex AI Configuration
gcp.project.id=architect-459809
gcp.location=us-central1
gcp.publisher=google
gcp.imagen.model=imagen-3.0-generate-002

# If spring.datasource.url (etc.) are set as environment variables, they will override these defaults.
# The :jdbc:postgresql://localhost:5432/ai_architect_dev part provides a fallback for local running
# outside docker if the SPRING_DATASOURCE_URL env var isn't set.
# The Docker Compose backend service definition (source 37) sets these SPRING_DATASOURCE_URL,
# SPRING_DATASOURCE_USERNAME, and SPRING_DATASOURCE_PASSWORD environment variables,
# pointing to the 'postgres_db' service.
